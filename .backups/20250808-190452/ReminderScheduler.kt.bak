package com.easy.reminder.plugin

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import androidx.core.content.getSystemService
import kotlin.math.max

object ReminderScheduler {
    fun syncAll(context: Context, reminders: List<ReminderDTO>, nowMs: Long) {
        reminders.filter { it.active && it.intervalMinutes > 0 }
            .forEach { scheduleNext(context, it, nowMs) }
    }

    fun scheduleNext(context: Context, r: ReminderDTO, nowMs: Long) {
        val am = context.getSystemService<AlarmManager>() ?: return
        val intervalMs = r.intervalMinutes * 60_000L
        val last = r.lastTriggered ?: (nowMs - intervalMs)
        val next = max(last + intervalMs, nowMs + 1_000L)

        val intent = Intent(context, ReminderReceiver::class.java).apply {
            action = "com.easy.reminder.ACTION_FIRE"
            putExtra("reminderId", r.id)
            putExtra("intervalMs", intervalMs)
        }

        val pi = PendingIntent.getBroadcast(
            context,
            r.id.hashCode(),
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, next, pi)
    }
}

